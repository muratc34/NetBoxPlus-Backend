// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SubscriptionAPI.Infrastructure;

#nullable disable

namespace SubscriptionAPI.Migrations
{
    [DbContext(typeof(SubscriptionContext))]
    partial class SubscriptionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SubscriptionAPI.Model.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ProfileCount")
                        .HasColumnType("integer");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba50cd36-001b-47ce-998e-4f6e53523120"),
                            ProfileCount = 1,
                            Quality = "HD"
                        },
                        new
                        {
                            Id = new Guid("1198a41e-043b-47f2-81ce-e0ed9e3313e2"),
                            ProfileCount = 2,
                            Quality = "FHD"
                        },
                        new
                        {
                            Id = new Guid("7c455f08-cb50-4b04-b0e0-bc5f827dfc18"),
                            ProfileCount = 3,
                            Quality = "UHD"
                        });
                });

            modelBuilder.Entity("SubscriptionAPI.Model.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SubscriptionExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SubscriptionStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SubscriptionStatus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ce76648-d034-44da-9376-dfba0e65f528"),
                            PlanId = new Guid("ba50cd36-001b-47ce-998e-4f6e53523120"),
                            SubscriptionExpiration = new DateTimeOffset(new DateTime(2023, 6, 28, 11, 46, 26, 307, DateTimeKind.Unspecified).AddTicks(3478), new TimeSpan(0, 3, 0, 0, 0)),
                            SubscriptionStartDate = new DateTimeOffset(new DateTime(2023, 5, 29, 11, 46, 26, 307, DateTimeKind.Unspecified).AddTicks(3516), new TimeSpan(0, 3, 0, 0, 0)),
                            SubscriptionStatus = true,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("SubscriptionAPI.Model.Subscription", b =>
                {
                    b.HasOne("SubscriptionAPI.Model.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });
#pragma warning restore 612, 618
        }
    }
}
