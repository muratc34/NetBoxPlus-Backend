// <auto-generated />
using System;
using AuthAPI.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthAPI.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20230122103408_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthAPI.Model.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff5990a4-e68b-41c9-a917-cd81009252ef"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("a4d8c529-eaf8-4e9d-bea5-7209291fdc4c"),
                            Name = "Kullanıcı"
                        });
                });

            modelBuilder.Entity("AuthAPI.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99c05531-503f-4179-859b-5408a3a0f34b"),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 189, 130, 76, 211, 219, 98, 147, 90, 141, 111, 248, 18, 148, 213, 193, 118, 82, 127, 211, 225, 231, 130, 33, 228, 4, 254, 8, 22, 5, 74, 132, 204, 85, 195, 146, 236, 26, 24, 51, 68, 11, 10, 118, 121, 223, 30, 84, 137, 81, 89, 33, 95, 54, 119, 36, 186, 245, 135, 115, 177, 117, 41, 23, 97 },
                            PasswordSalt = new byte[] { 205, 237, 169, 93, 15, 247, 167, 197, 78, 227, 115, 156, 1, 46, 44, 237, 210, 252, 148, 198, 203, 163, 108, 203, 244, 66, 140, 241, 88, 205, 49, 125, 31, 104, 71, 22, 250, 146, 225, 76, 125, 100, 37, 176, 30, 253, 44, 196, 13, 57, 3, 141, 91, 21, 143, 130, 11, 44, 219, 124, 165, 255, 172, 53, 96, 37, 13, 72, 241, 44, 205, 159, 80, 203, 182, 0, 3, 216, 252, 196, 184, 152, 249, 53, 196, 65, 244, 242, 228, 78, 93, 65, 89, 166, 186, 6, 227, 96, 110, 83, 157, 242, 235, 219, 161, 114, 94, 174, 135, 85, 48, 0, 203, 246, 63, 73, 175, 69, 174, 65, 119, 144, 162, 173, 143, 58, 1, 180 },
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("c5ec0a6f-9d71-4055-a44c-77a6f455de71"),
                            Email = "murat@murat.com",
                            FirstName = "Murat",
                            LastName = "Cinek",
                            PasswordHash = new byte[] { 16, 94, 187, 234, 68, 156, 139, 52, 50, 176, 88, 182, 84, 141, 46, 93, 185, 188, 161, 73, 199, 245, 175, 88, 43, 147, 131, 239, 189, 44, 178, 240, 103, 234, 183, 196, 15, 253, 232, 129, 152, 180, 40, 170, 239, 113, 44, 142, 108, 27, 233, 141, 242, 115, 147, 206, 187, 57, 86, 228, 232, 212, 184, 127 },
                            PasswordSalt = new byte[] { 205, 237, 169, 93, 15, 247, 167, 197, 78, 227, 115, 156, 1, 46, 44, 237, 210, 252, 148, 198, 203, 163, 108, 203, 244, 66, 140, 241, 88, 205, 49, 125, 31, 104, 71, 22, 250, 146, 225, 76, 125, 100, 37, 176, 30, 253, 44, 196, 13, 57, 3, 141, 91, 21, 143, 130, 11, 44, 219, 124, 165, 255, 172, 53, 96, 37, 13, 72, 241, 44, 205, 159, 80, 203, 182, 0, 3, 216, 252, 196, 184, 152, 249, 53, 196, 65, 244, 242, 228, 78, 93, 65, 89, 166, 186, 6, 227, 96, 110, 83, 157, 242, 235, 219, 161, 114, 94, 174, 135, 85, 48, 0, 203, 246, 63, 73, 175, 69, 174, 65, 119, 144, 162, 173, 143, 58, 1, 180 },
                            Status = false
                        });
                });

            modelBuilder.Entity("AuthAPI.Model.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37625acc-172f-46e1-aede-05bcedf303d4"),
                            OperationClaimId = new Guid("ff5990a4-e68b-41c9-a917-cd81009252ef"),
                            UserId = new Guid("99c05531-503f-4179-859b-5408a3a0f34b")
                        },
                        new
                        {
                            Id = new Guid("123d74c0-36c9-408e-8adb-64fbe2eee371"),
                            OperationClaimId = new Guid("a4d8c529-eaf8-4e9d-bea5-7209291fdc4c"),
                            UserId = new Guid("c5ec0a6f-9d71-4055-a44c-77a6f455de71")
                        });
                });

            modelBuilder.Entity("OperationClaimUser", b =>
                {
                    b.Property<Guid>("OperationClaimsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OperationClaimsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("OperationClaimUser");
                });

            modelBuilder.Entity("AuthAPI.Model.UserOperationClaim", b =>
                {
                    b.HasOne("AuthAPI.Model.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthAPI.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OperationClaimUser", b =>
                {
                    b.HasOne("AuthAPI.Model.OperationClaim", null)
                        .WithMany()
                        .HasForeignKey("OperationClaimsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthAPI.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
